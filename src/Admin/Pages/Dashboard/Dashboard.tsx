/* eslint-disable @typescript-eslint/no-explicit-any */
import { BarChart3, Boxes, PackageCheck, Wallet } from "lucide-react"
import { Helmet } from "react-helmet-async"
import { keepPreviousData, useQuery } from "@tanstack/react-query"
import { adminAPI } from "src/Apis/admin.api"
import { SuccessResponse } from "src/Types/utils.type"
import Skeleton from "src/Components/Skeleton"
import NavigateBack from "src/Admin/Components/NavigateBack"
import { motion } from "framer-motion"
import { formatCurrency } from "src/Helpers/common"
import { Chart, Pie } from "react-chartjs-2"
import { Col, DatePicker, Row, Switch } from "antd"
import ChartDataLabels from "chartjs-plugin-datalabels"
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend,
  ArcElement,
  PointElement,
  LineElement,
  ChartOptions
} from "chart.js"
import dayjs, { Dayjs } from "dayjs"
import { useState } from "react"

type TypeStatistical = {
  title: string
  value: number | any[]
  color?: string
}

ChartJS.register(
  CategoryScale,
  ArcElement,
  LinearScale,
  BarElement,
  PointElement,
  LineElement,
  ChartDataLabels,
  Title,
  Tooltip,
  Legend
)
// queryClient.invalidateQueries({ queryKey: ["listOrderClient", token] })

const statusOrder = ["Ch·ªù x√°c nh·∫≠n", "ƒêang x·ª≠ l√Ω", "ƒêang v·∫≠n chuy·ªÉn", "ƒê√£ giao h√†ng", "ƒê√£ h·ªßy"]

export default function Dashboard() {
  const [selectedMonth, setSelectedMonth] = useState<Dayjs>(dayjs())

  const getStatisticalSell = useQuery({
    queryKey: ["getStatisticalSell", selectedMonth.format("YYYY-MM")],
    queryFn: () => {
      const controller = new AbortController()
      setTimeout(() => {
        controller.abort()
      }, 10000) // qu√° 10 gi√¢y api ch∆∞a tr·∫£ res v·ªÅ th√¨ timeout s·∫Ω h·ªßy g·ªçi api v√† api signal nh·∫≠n t√≠n hi·ªáu h·ªßy
      const month = selectedMonth.month() + 1
      const year = selectedMonth.year()

      return adminAPI.statistical.getStatisticalSell(controller.signal, {
        month: month,
        year: year
      })
    },
    placeholderData: keepPreviousData,
    retry: 0, // s·ªë l·∫ßn retry l·∫°i khi h·ªßy request (d√πng abort signal)
    staleTime: 1 * 60 * 1000 // d∆∞·ªõi 5 ph√∫t n√≥ kh√¥ng g·ªçi l·∫°i api
  })

  const getStatisticalProduct = useQuery({
    queryKey: ["getStatisticalProduct"],
    queryFn: () => {
      const controller = new AbortController()
      setTimeout(() => {
        controller.abort()
      }, 10000) // qu√° 10 gi√¢y api ch∆∞a tr·∫£ res v·ªÅ th√¨ timeout s·∫Ω h·ªßy g·ªçi api v√† api signal nh·∫≠n t√≠n hi·ªáu h·ªßy

      return adminAPI.statistical.getStatisticalProduct(controller.signal)
    },
    placeholderData: keepPreviousData,
    retry: 0, // s·ªë l·∫ßn retry l·∫°i khi h·ªßy request (d√πng abort signal)
    staleTime: 1 * 60 * 1000 // d∆∞·ªõi 5 ph√∫t n√≥ kh√¥ng g·ªçi l·∫°i api
  })

  /**
   * AbortController gi√∫p theo d√µi v√† h·ªßy request.
  Sau 10 gi√¢y, abort() ƒë∆∞·ª£c g·ªçi, b√°o hi·ªáu cho request d·ª´ng l·∫°i.
  API nh·∫≠n t√≠n hi·ªáu h·ªßy th√¥ng qua signal, n·∫øu request ch∆∞a ho√†n th√†nh, n√≥ s·∫Ω b·ªã ng·∫Øt.
  React Query nh·∫≠n bi·∫øt request b·ªã h·ªßy v√† x·ª≠ l√Ω theo tr·∫°ng th√°i l·ªói.
   */

  const dataStatisticalSell = getStatisticalSell?.data?.data as SuccessResponse<{
    totalCustomer: TypeStatistical
    totalOrder: TypeStatistical
    totalProductSold: TypeStatistical
    avgOrderValue: TypeStatistical
    countCategory: TypeStatistical
    top10ProductSold: TypeStatistical
    rateStatusOrder: any[]
  }>

  const dataStatisticalProduct = getStatisticalProduct?.data?.data as SuccessResponse<{
    countCategory: TypeStatistical
    top10ProductSold: TypeStatistical
  }>

  const totalCustomer = dataStatisticalSell?.result.totalCustomer
  const totalOrder = dataStatisticalSell?.result.totalOrder
  const totalProductSold = dataStatisticalSell?.result.totalProductSold
  const avgOrderValue = dataStatisticalSell?.result.avgOrderValue

  const countCategory = dataStatisticalProduct?.result.countCategory
  const labelData_CountCategory = (countCategory?.value as any[])?.map((item) => item.categoryName)
  const data_countCategory = (countCategory?.value as any[])?.map((item) => item.total)

  const top10ProductSold = dataStatisticalProduct?.result.top10ProductSold
  const labelData_Top10Product = (top10ProductSold?.value as any[])?.map((item) => item.name)
  const data_top10ProductSold = (top10ProductSold?.value as any[])?.map((item) => item.sold)

  const rateStatusOrder = dataStatisticalSell?.result.rateStatusOrder
  const data_rateStatusOrder = statusOrder.map((status) => {
    const found = rateStatusOrder?.find((item) => item.name === status)
    return found ? found.rate : 0 // N·∫øu kh√¥ng c√≥, g√°n 0
  })

  const options: ChartOptions<"bar"> = {
    indexAxis: "y", // üî• Bi·ªÉu ƒë·ªì c·ªôt ngang
    responsive: true,
    interaction: {
      mode: "nearest",
      axis: "y",
      intersect: false
    },
    maintainAspectRatio: false, // gi√∫p bi·ªÉu ƒë·ªì co d√£n t·ªët
    plugins: {
      legend: { display: true },
      title: {
        display: true,
        text: "Th·ªëng k√™ s·∫£n ph·∫©m theo danh m·ª•c",
        font: { size: 16, weight: 500 },
        padding: { top: 10, bottom: 10 }
      },
      tooltip: {
        mode: "index",
        intersect: false
      },
      datalabels: {
        anchor: "end", // v·ªã tr√≠ g·∫Øn label (start, center, end)
        align: "right", // v·ªã tr√≠ theo h∆∞·ªõng ngang (left, right, center)
        formatter: (value) => `${value}`, // custom c√°ch hi·ªÉn th·ªã s·ªë
        font: {
          weight: "normal"
        },
        color: "#000" // m√†u ch·ªØ
      }
    },
    scales: {
      x: {
        beginAtZero: true,
        title: {
          display: true,
          text: "S·ªë l∆∞·ª£ng s·∫£n ph·∫©m"
        }
      },
      y: {
        title: {
          display: true,
          text: "Danh m·ª•c"
        }
      }
    }
  }

  const options2: ChartOptions<"bar"> = {
    indexAxis: "y", // üî• Bi·ªÉu ƒë·ªì c·ªôt ngang
    responsive: true,
    interaction: {
      mode: "nearest",
      axis: "y",
      intersect: false
    },
    maintainAspectRatio: false, // gi√∫p bi·ªÉu ƒë·ªì co d√£n t·ªët
    plugins: {
      legend: { display: true },
      title: {
        display: true,
        text: "Top 10 s·∫£n ph·∫©m b√°n ch·∫°y nh·∫•t th·ªùi ƒë·∫°i",
        font: { size: 16, weight: 500 },
        padding: { top: 10, bottom: 10 }
      },
      tooltip: {
        mode: "index",
        intersect: false
      },
      datalabels: {
        anchor: "end", // v·ªã tr√≠ g·∫Øn label (start, center, end)
        align: "right", // v·ªã tr√≠ theo h∆∞·ªõng ngang (left, right, center)
        formatter: (value) => `${value}`, // custom c√°ch hi·ªÉn th·ªã s·ªë
        font: {
          weight: "normal"
        },
        color: "#000" // m√†u ch·ªØ
      }
    },
    scales: {
      x: {
        beginAtZero: true,
        title: {
          display: true,
          text: "S·ªë l∆∞·ª£t b√°n"
        }
      }
    }
  }

  const pieOptions: ChartOptions<"pie"> = {
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      legend: {
        display: true,
        position: "top" as const
      },
      title: {
        display: true,
        text: "T·ª∑ l·ªá tr·∫°ng th√°i ƒë∆°n h√†ng",
        font: { size: 16 },
        padding: { top: 10, bottom: 10 }
      },
      tooltip: {
        callbacks: {
          label: function (context: any) {
            const find = rateStatusOrder.find((item) => item.name === context.label)
            const total = find?.total ?? 0
            const rate = find?.rate ?? 0
            const status = find?.name ?? ""
            // Hi·ªÉn th·ªã ƒë·∫ßy ƒë·ªß th√¥ng tin
            return `${status}: ${total} ƒë∆°n (${rate}%)`
          }
        }
      },
      datalabels: {
        formatter: (value: any) => `${value}%`, // custom c√°ch hi·ªÉn th·ªã s·ªë
        color: "#fff", // m√†u ch·ªØ tr·∫Øng
        font: {
          weight: "normal",
          size: 15
        }
      }
    }
  }

  const dataChart = {
    labels: labelData_CountCategory,
    datasets: [
      {
        label: "S·ªë l∆∞·ª£ng",
        data: data_countCategory,
        backgroundColor: "rgba(75, 192, 192, 0.7)",
        borderColor: "rgba(75, 192, 192, 1)",
        borderWidth: 1
      }
    ]
  }

  const dataChart_2 = {
    labels: labelData_Top10Product,
    datasets: [
      {
        label: "L∆∞·ª£t b√°n",
        data: data_top10ProductSold,
        backgroundColor: "rgba(212, 63, 21, 0.7)",
        borderColor: "#e86e22",
        borderWidth: 1
      }
    ]
  }

  const pieData = {
    labels: statusOrder,
    datasets: [
      {
        data: data_rateStatusOrder,
        backgroundColor: ["#d46b08", "#0958d9", "#08979c", "#389e0d", "#cf1322"],
        borderWidth: 1
      }
    ]
  }

  const [isMonthly, setIsMonthly] = useState(true) // true = theo th√°ng, false = theo nƒÉm

  return (
    <div>
      <Helmet>
        <title>Qu·∫£n l√Ω th·ªëng k√™ h·ªá th·ªëng</title>
        <meta
          name="description"
          content="ƒê√¢y l√† trang TECHZONE | Laptop, PC, M√†n h√¨nh, ƒëi·ªán tho·∫°i, linh ki·ªán Ch√≠nh H√£ng"
        />
      </Helmet>
      <NavigateBack />
      <div>
        <h1 className="text-2xl font-bold text-gray-800 bg-clip-text text-transparent bg-gradient-to-r from-blue-600 to-indigo-600 my-2">
          Th·ªëng k√™ h·ªá th·ªëng
        </h1>
        {getStatisticalSell.isLoading && <Skeleton />}
        {!getStatisticalSell.isFetching ? (
          <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }}>
            <div className="flex items-center justify-between">
              <div className="text-base font-semibold tracking-wide">Qu·∫£n l√Ω b√°n h√†ng</div>
              <div className="flex gap-1 items-center">
                <Switch
                  checkedChildren="Theo th√°ng"
                  unCheckedChildren="Theo nƒÉm"
                  defaultChecked
                  onChange={(checked) => {
                    setIsMonthly(checked)
                  }}
                />
                {isMonthly ? (
                  <DatePicker
                    value={selectedMonth}
                    onChange={(date) => {
                      if (date) {
                        setSelectedMonth(date)
                      }
                    }}
                    picker="month"
                    format="MM/YYYY"
                    placeholder="Ch·ªçn th√°ng"
                  />
                ) : (
                  <DatePicker
                    value={selectedMonth}
                    // onChange={(value) => {
                    //   const updated = selectDate.year(value.year()) // gi·ªØ nguy√™n th√°ng hi·ªán t·∫°i
                    //   setSelectDate(updated)
                    // }}
                    picker="year"
                    format="YYYY"
                    placeholder="Ch·ªçn nƒÉm"
                  />
                )}
              </div>
            </div>
            <Row gutter={[24, 24]} className="mt-2">
              <Col span={6}>
                <div
                  style={{ height: "100%" }}
                  className="border-gray-500 shadow-md rounded-xl bg-white p-6 flex flex-col justify-between"
                >
                  <div className="flex items-start justify-between">
                    <div className="text-sm font-semibold tracking-wide mr-2">{totalCustomer?.title}</div>
                    <Wallet size={22} color="black" />
                  </div>
                  <div className={`text-2xl font-semibold mt-4`} style={{ color: totalCustomer?.color }}>
                    {formatCurrency((totalCustomer?.value as number) || 0)}ƒë
                  </div>
                </div>
              </Col>

              <Col span={6}>
                <div
                  style={{ height: "100%" }}
                  className="border-gray-500 shadow-md rounded-xl bg-white p-6 flex flex-col justify-between"
                >
                  <div className="flex items-start justify-between">
                    <div className="text-sm font-semibold tracking-wide mr-2">{avgOrderValue?.title}</div>
                    <BarChart3 size={22} color="black" />
                  </div>
                  <div className={`text-2xl font-semibold mt-4`} style={{ color: avgOrderValue?.color }}>
                    {formatCurrency((avgOrderValue?.value as number) || 0)}ƒë
                  </div>
                </div>
              </Col>

              <Col span={6}>
                <div
                  style={{ height: "100%" }}
                  className="border-gray-500 shadow-md rounded-xl bg-white p-6 flex flex-col justify-between"
                >
                  <div className="flex items-start justify-between">
                    <div className="text-sm font-semibold tracking-wide mr-2">{totalOrder?.title}</div>
                    <PackageCheck size={22} color="black" />
                  </div>
                  <div className={`text-2xl font-semibold mt-4`} style={{ color: totalOrder?.color }}>
                    {totalOrder?.value || 0}
                  </div>
                </div>
              </Col>

              <Col span={6}>
                <div
                  style={{ height: "100%" }}
                  className="border-gray-500 shadow-md rounded-xl bg-white p-6 flex flex-col justify-between"
                >
                  <div className="flex items-start justify-between">
                    <div className="text-sm font-semibold tracking-wide mr-2">{totalProductSold?.title}</div>
                    <Boxes size={22} color="black" />
                  </div>
                  <div className={`text-2xl font-semibold mt-4`} style={{ color: totalProductSold?.color }}>
                    {totalProductSold?.value || 0}
                  </div>
                </div>
              </Col>

              <Col span={12}>
                <div
                  style={{
                    backgroundColor: "white",
                    border: "1px solid #dadada",
                    height: 380,
                    display: "flex",
                    justifyContent: "center",
                    borderRadius: "12px"
                  }}
                >
                  <Pie data={pieData} options={pieOptions} />
                </div>
              </Col>
            </Row>
          </motion.div>
        ) : (
          ""
        )}

        {getStatisticalProduct.isLoading && <Skeleton />}
        {!getStatisticalProduct.isFetching ? (
          <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }}>
            <div className="mt-4">
              <div className="text-base font-semibold tracking-wide">Qu·∫£n l√Ω s·∫£n ph·∫©m</div>
              <Row gutter={24} className="mt-2">
                <Col span={12}>
                  <div
                    className="shadow-xl p-6"
                    style={{
                      border: "1px solid #dadada",
                      borderRadius: "8px",
                      backgroundColor: "white",
                      height: "350px"
                    }}
                  >
                    <Chart type="bar" data={dataChart} options={options} />
                  </div>
                </Col>
                <Col span={12}>
                  <div
                    className="shadow-xl p-6"
                    style={{
                      border: "1px solid #dadada",
                      borderRadius: "8px",
                      backgroundColor: "white",
                      height: "350px"
                    }}
                  >
                    <Chart type="bar" data={dataChart_2} options={options2} />
                  </div>
                </Col>
              </Row>
            </div>
          </motion.div>
        ) : (
          ""
        )}
      </div>
    </div>
  )
}
